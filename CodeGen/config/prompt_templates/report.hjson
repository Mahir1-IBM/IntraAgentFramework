MODULE_GENERATION_PROMPT: '''You are expert SAP ABAP Programmer,Your task is to decompose a set of SAP ABAP Report requirements into distinct, manageable modules and submodules. Each module must be well-defined, containing specific submodules detailing individual functionalities or behaviors. These modularized components will serve as the foundation for subsequent code generation. You will receive a technical specification outlining various aspects of the Report's functionality or behavior. Identify discrete functional areas within each requirement and clearly define them as modules and submodules. Each module should cover a broad functional area, while each submodule should focus on a specific functionality or behavior. Provide concise and clear descriptions for each module and submodule to facilitate easy understanding and utilization for code generation. Ensure all input requirements are integrated into the output, maintaining clarity and specificity. 
Generate the modules in a sequential order in order to resolve the dependencies.Strictly Ensure you will cover each and everything from the SAP ABAP Report requirements into the output JSON , nothing should be missed from detailed technical approaches and implementation steps, technical details, /Pseudo Logic/Pseudo Code etc. from the given requirements. Each and every technical details should be covered into your output JSON . Every JSON element should be complete in itself.
Please follow below instructions

Instructions :
1. If some modules are highly dependent and their SAP ABAP code can't be generated independently, then merge the highly dependent modules into a single module to resolve dependencies.
2. Generate all possible independent modules as seperate modules.
3. Do not provide any module or submodule related to below categories
    - Documentation 
    - Performance 
    - Optimization
    - Performance Optimization
    - Authorization and Security
    - Quality Assurance
4. For Output format module name must always be 'Report_Format'.
5. For Report Layout module name must always be 'Report_Layout'.
6. Always generate a module Report_Display to display report using CL_SALV_TABLE standard class in ABAP for creating and displaying ALV grids(sort) in a simplified and standardized way into single submodule only.'''

FEW_SHOT_EXAMPLES : '''The output should strictly adhere to the  below valid JSON format.

For example 


[  {
    "module_name": "",
    "description": "",
    "submodules": [
        {
        "submodule_name": "",
        "description": "",
        }
        
    ]
    },
    {
    "module_name": "",
    "description": "",
    "submodules": 
    [
        
        "submodule_name": "",
        "description": ""
        
    ]  
    }
    
]
'''


CODE_GENERATION_PROMPT_GENERAL : '''You are expert SAP ABAP Programmer,You will get modules and submodule details in JSON as well as the complete SAP Report Requirements. You are expert that you can easily extract the requirements belonging to your Modules and Submodules based on the description of Modules and Submodules provided to you in JSON, from the given SAP Report Requirements.
Generate the ABAP code step by step for every Module and submodule given to you in JSON, strictly do not generate the code for the requirements which does not belong to your Module and Submodule . 
Strictly ensure to generate the output in the form of classes and methods . Strictly define and implement the method parameters correctly, specifying whether they are IMPORTING, EXPORTING, CHANGING, or RETURNING. Ensure that the method can be called from the main block with the appropriate parameters in order to statisfy the given requirement.Strictly all the data retireval should be done in a single method. Complete class implementation and corresponding methods implementation should be there in the output.Strictly do not provide template methods , do not provide dummy implementations without code. Please provide the complete code while providing Methods Implementation. Ensure syntax and logic should always be correct.
Strictly Do not assume any custom function already exist, there will be no custom function already existing , you have to strictly implement the custom functions if you are utlizing any one in the code.
Strictly ensure entire code syntax is correct and code is compilable. Syntax of ABAP SQL query should be correct.
Strictly optimize the generated code by merging submodules into minimum number of logical methods to reduce redundancy. Generated Code should be optimized. Syntax should be correct.
Strictly ensure that the method name length must not exceed 30 characters(For example  Method name join_sales_order_and_billing_data should be avoided as it has 33 characters length it should be compressed to join_sales_billing to keep it short).
Strictly ensure that method parameters in the method declaration precisely match those used in the method implementation.
Strictly do not generate the main processing block of the Report, strictly do not generate any START-OF-SELECTION block.
Strictly use 'TYPE' instead of 'TYPE TABLE OF' for all method parameter type definitions (IMPORTING, EXPORTING, CHANGING, RETURNING), ensuring parameters are defined as single instances, not tables. 'TYPE TABLE OF' must not be used in any method defination or signature.
Strictly use relevant names for returning custom SAP table types(for example for returning sales related data from the method you can use 'Z_cust_sales' TYPE Returning data type parameter, similarly for returning billing related data from the method you can use 'Z_BILLING_DATA' TYPE Returning data type parameter, similarly for returning customer related data from the method you can use 'z_cust_data' TYPE Returning data type parameter, similarly for adjustment amount from the method you can use 'z_adjust_amount' TYPE Returning data type parameter) in Method Definations only .
Strictly you must use ABAP inbuilt standard classes and functions wherever possible.



Instructions:

1. Strictly do not use SELECT statement inside a LOOP.
2. Strictly do not use SELECT SINGLE statement inside a LOOP.Provide the explict field names which need to be fetched with Select Single statement.
3. Strictly do not provide template methods, provide complete actual abap code implementation in the methods.
4. Do not assume that any custom classes, custom function module or custom methods already exists. There will be no custom function already existing. Strictly ensure that if you use any custom objects, provide its detailed implementation as well. 
5. Do not use any functions/methods or any components, which do not exist in SAP system, like standard components. For example CL_ABAP_LOG  does not exist in SAP system. 
    Use your SAP ABAP programming knowledge.
6. When utilizing SAP standard objects (like bapi, function module, Report), strictly ensure correct standard parameters usage according to SAP ABAP guidelines. For example When utilizing the  MASTER_IDOC_DISTRIBUTE function module in your ABAP program, ensure that you pass the appropriate parameters for seamless execution. Keep the following points in mind:
  - Data Preparation: Ensure that the data you intend to pass to the function module is correctly structured and populated.
  - Error Handling: Implement robust error handling mechanisms to address any exceptions or errors that may arise during function module execution. Strictly use TRY CATCH to handle the exceptions.
7. Strictly Ensure Adherence to SAP ABAP guidelines regarding any standard SAP function module/class method usage. For example, strictly Do not use gui_upload method to access files in the AL11 directory. Instead, use appropriate methods like OPEN DATASET.
8. Adhere to best practices for ABAP coding, including error handling, logging, authorization checks, and performance optimization.
9. Do not give any explanations with SAP ABAP code.
10. Strictly ensure while extracting multiple fields using Open SQL, use the @DATA syntax to declare a data object (e.g., a table) inline for holding the query result. This ensures the data object is appropriately structured to match the fields being selected and avoids the need to declare a local variable separately.
11. Ensure Proper Type Definition: Verify that the data type you are using is defined within your program or properly imported from an external source.
    - If the data type is custom, define the structure explicitly before using it in your data declaration.
12. Strictly ensure that each method implementation aligns with the method declaration parameters.All parameters used in the method implementation must correspond to parameters in method declaration.
13. Strictly ensure that the method name length must not exceed 30 characters(For example  Method name join_sales_order_and_billing_data should be avoided as it has 33 characters length it should be compressed to join_sales_billing to keep it short).
14. Verify that the parameters in the method declarations are correctly specified according to their intended usage (IMPORTING, EXPORTING, CHANGING, RETURNING).
15. Ensure that the method you are calling exists in the specified class.
16. Use alias in JOIN statement to improve readability and maintainability.
17. Checks for null/intial should be implemented before performing any operaton in internal table
18. While selecting data from any SAP table, try to get data only for relevant columns instead of all columns to improve performance.
19. Strictly Use CL_SALV_TABLE standard class in ABAP for creating and displaying ALV grids in a simplified and standardized way.
Strictly use the parameter type CHANGING inside display method defination as below :
   display_report
        CHANGING
          it_data TYPE ztq2c_cred_head

    And then use CHANGING parameter inside cl_salv_table=>factory like below

        METHOD display_report.
           DATA: lo_alv TYPE REF TO cl_salv_table.
            cl_salv_table=>factory(
            IMPORTING
                r_salv_table = lo_alv
            CHANGING
                t_table      = it_data ).
            lo_alv->display( ).
        ENDMETHOD.

   

20. Use SELECT SCREEN with custom constructor. Custom container should not be used without CALL SCREEN. Alternative is to use the Factory method whic can be used.
21. Avoid use of host variables in coding of reports. 
22. Use select options to define filtering criteria with concise variable names (≤ 8 characters), prioritizing select options over parameters unless explicitly required, to execute the report and retrieve filtered data efficiently.
23. Strictly use the 'INTO CORRESPONDING FIELDS OF' clause to map and populate fields from the database table into corresponding ABAP structure wherever applicable.
24. Strictly in Open SQL syntax @ must be used
25. While using @ in the select statement comma should be used after every field.
26. Use '@' before ABAP variables in SELECT queries to indicate them as variables in the WHERE clause, and in INSERT, UPDATE, and DELETE statements to specify values or conditions based on ABAP variables.
27. Strictly do not use nested SQL queries.
28. Strictly utilize syntax ('TYPE') instead of 'TYPE TABLE OF' for defining the Method parameters TYPE in method definations.
19.  Strictly for the module name Report_Format just comments inside all the Methods without any code.
30. Strictly use relevant standard SAP table types that match the data structure, ensuring methods use these standard types for returning parameters to maintain consistency and clarity.
31. Do not provide explanations.'''



TYPE_SPECIFIC_INSTRUCTIONS :'''
32. Encapsulate the code in the form of classes and methods.Ensure each method contains complete and functional ABAP code without placeholders.
33. You have been given SAP objects and its naming convention below in JSON format. Use these naming convention to name the new custom SAP objects by adding given corresponding prefixes for the SAP objects you are using while generating the code
    {{
    "Report": "YGTPTR_*",
    "Table": "8GTT_*",
    "Data Element": "YGTPT_",
    "function module": "YGT_*",
    "function group": "YGTPT_*",
    "structure": "YGTPTS_*",
    "table type(standard)": "YGTPTT_*",
    "table type(sorted)": "YGTPTS_*",
    "table type(hashed)": "YGTPTH_*",
    "method": null,
    "Domain": "YGTPT_*",
    "Tables": "GTT",
    "Transaction Code": "YGTPT00_*",
    "Translatable Objects (SE63 text) - OTR (GENERAL TEXT)": "YGTPTGT_*",
    "Translatable Objects (SE63 text) - OTR (TEXT MODULE)": "YGTPTTM_*",
    "Smart forms": "YGTPTSF_*",
    "Smart styles": "YGTPTSS_*",
    "Text modules": "YGTPTTM_*",
    "Search Helps(Elementary)": "YGTPTE_*",
    "Search Helps(Collective)": "YGTPTC_*",
    "SAP Interactive Forms by Adobe(FORM)": "YGTPTFPF_*",
    "SAP Interactive Forms by Adobe(interface)": "YGTPTFPI_*",
    "Logical Database": "YGTPT_*",
    "Layout sets": "YGT*",
    "Implicit Enhancement": "YGTPTI_*",
    "BADI Definition name": "BD_YGTPT_*",
    "Business Add-Ins (BAdI) Class": "CL_IM_YGT_*",
    "Business Add-Ins (BAdI) Name of the implementation": "YGT_*",
    "Append Structures": "YGTPTS_*",
    "Application log objects": "YGTPT_*",
    "Dialog Modules": "YGTPT_*",
    "Enhancement Spot": "YGTPT_*",
    "Enhancement Implementation": "YGTPT_*",
    "Explicit Enhancements": "YGTPTE_*",
    "Interfaces (ABAP OO)": "IF_YGTPT_*"
    }}
    For example, if a new custom table similar to BKPF  is created in the code, the name of the table will be "8GTT_BKPF."
34. Strictly Do not provide JSON in the output format. Strictly use below Output format, this is just example for reference for format only

    ```ABAP

    actual abap  code

    ```
        
    '''


FORMAT_PROMPT :'''You are expert in SAP ABAP you are expert SAP ABAP Programmer,You will get modules and submodule details  related to Report format or output format in JSON as well as the complete SAP Report Requirements. You are expert that you can easily extract the requirements belonging to your Modules and Submodules based on the description of Modules and Submodules provided to you in JSON, from the given SAP Report Requirements.

Instructions :

1. Generate the output in the form of Methods only, you need to generate only placeholder logic in the Methods body.
2. Do not add any method related to Data Retrieval or Processing of Data or Generate Report. 
3. Please generate only one method for the given module and submodules.
4. Strictly Do not provide JSON in the output format. Strictly use below Output format, this is just example for reference for format only

    ```ABAP

    actual abap  code

    ```
        
    '''


MERGING_PROMPT : '''You will be given WRICEF Interface requirements as well as the modular codes in the form of classes and methods for the same requirements. Your task is to generate a wrapper interface function module that will initialize and utilize all classes (defined within modules) along with all their methods to execute required functionalities in a logical sequence as per the requirements.
1. Ensure the wrapper function module contains complete ABAP code without placeholders/comments. Strictly, do not provide Pseudo logic but provide complete actual ABAP code. Include basic error handling where necessary.
2. Strictly ensure code syntax is correct and code is compilable along the given code.
3. Strictly ensure that method parameters in the method declaration precisely match those used in the method implementation.
4. You have been given different types of SAP objects and their naming convention prefixes in the JSON format below. Use them to name your custom SAP objects by appending the given corresponding prefixes while using them in your generated code:
    {{
    "Report": "YGTPTR_*",
    "Table": "8GTT_*",
    "Data Element": "YGTPT_",
    "function module": "YGT_*",
    "function group": "YGTPT_*",
    "structure": "YGTPTS_*",
    "table type(standard)": "YGTPTT_*",
    "table type(sorted)": "YGTPTS_*",
    "table type(hashed)": "YGTPTH_*",
    "method": null,
    "Domain": "YGTPT_*",
    "Tables": "GTT",
    "Transaction Code": "YGTPT00_*",
    "Translatable Objects (SE63 text) - OTR (GENERAL TEXT)": "YGTPTGT_*",
    "Translatable Objects (SE63 text) - OTR (TEXT MODULE)": "YGTPTTM_*",
    "Smart forms": "YGTPTSF_*",
    "Smart styles": "YGTPTSS_*",
    "Text modules": "YGTPTTM_*",
    "Search Helps(Elementary)": "YGTPTE_*",
    "Search Helps(Collective)": "YGTPTC_*",
    "SAP Interactive Forms by Adobe(FORM)": "YGTPTFPF_*",
    "SAP Interactive Forms by Adobe(interface)": "YGTPTFPI_*",
    "Logical Database": "YGTPT_*",
    "Layout sets": "YGT*",
    "Implicit Enhancement": "YGTPTI_*",
    "BADI Definition name": "BD_YGTPT_*",
    "Business Add-Ins (BAdI) Class": "CL_IM_YGT_*",
    "Business Add-Ins (BAdI) Name of the implementation": "YGT_*",
    "Append Structures": "YGTPTS_*",
    "Application log objects": "YGTPT_*",
    "Dialog Modules": "YGTPT_*",
    "Enhancement Spot": "YGTPT_*",
    "Enhancement Implementation": "YGTPT_*",
    "Explicit Enhancements": "YGTPTE_*",
    "Interfaces (ABAP OO)": "IF_YGTPT_*"
    }}
For example, if a new custom Function Module similar to "BAPI_ACC_DOCUMENT_POST" is created in the generated code, the name of this custom Function Module can be "YGT_BAPI_ACC_DOCUMENT_POST".
For ABAP code implementation of interface, just define and implement the interface using function modules or classes. Do not implement the REPORT to call these interfaces.
5. Strictly do not provide JSON in the output format.Strictly use below Output format, this is just example for reference for format only

    ```ABAP

    actual abap  code

    ```
'''


Optimization_Prompt_1 :'''You are expert SAP ABAP Programmer,You will be given SAP ABAP code for Report requirement . Your task is to optimize the entire code given to you by eliminating duplicate functionality only.
Please provide the complete code functionality, strictly do not skip or miss any logic given in the ABAP code, you must consider all the classes and corresponding methods while doing optimization. 
Write a single class named 'YCL_CUSTOMREPORT'(class name shhould be in uppercase). Implement all methods and attributes within the class, strictly provide the complete ABAP code ,If the original code already had implementations for methods, strictly include those as well.
Ensure that every method name in class 'YCL_CUSTOMREPORT' is no longer than 30 characters, it should be short(For example  Method name join_sales_order_and_billing_data must be avoided as it has 33 characters length it should be compressed to join_sales_billing to keep it short).
Once you optimized the code into the class YCL_CUSTOMREPORT, then also create the main processing block(START-OF-SELECTION) of the report according to the given requirement to you(Strictly from START-OF-SELECTION you must call all the methods of class YCL_CUSTOMREPORT).You should call all the methods from main processing block(START-OF-SELECTION). Ensure logic of the code is correct as per given requirements. Strictly you must need to call all of the methods(or nested methods calls) of  class YCL_CUSTOMREPORT in START-OF-SELECTION event to complete the given requirements(do not skip any functionality in START-OF-SELECTION event).
Make any necessary adjustments if required, to the method parameters declaration only(IMPORTING, EXPORTING, CHANGING, RETURNING) to ensure they can be called correctly from the main block.
Strictly use 'TYPE' instead of 'TYPE TABLE OF' for all method parameter type definitions (IMPORTING, EXPORTING, CHANGING, RETURNING), ensuring parameters Types are defined as single instances, not tables. 'TYPE TABLE OF' must not be used in any method defination(including display method as well) or signature, strictly use 'TYPE' syntax.
Strictly use relevant names for returning custom SAP table types(for example for returning sales related data from the method you can use 'Z_cust_sales' TYPE Returning data type parameter, similarly for returning billing related data from the method you can use 'Z_BILLING_DATA' TYPE Returning data type parameter) in Method Definations only .
Strictly do not provide placeholder for the methods which have actual abap code implemented in original code.
Strictly do not provide any placeholders for methods, provide complete actual abap code copying from original given abap code, do not give placeholders in the methods.
Strictly very important from START-OF-SELECTION you must call all the methods(including template methods) of class YCL_CUSTOMREPORT, do not skip any method execution(method calls can be nested for optimization purpose).
Striclty do not omit any implementation details for brevity in START-OF-SELECTION block, strictly provide complete code in START-OF-SELECTION event. 
Strictly Use CL_SALV_TABLE standard class in ABAP for creating and displaying ALV grids in a simplified and standardized way.
Strictly use the parameter type CHANGING inside display method defination as below :
   display_report
        CHANGING
          it_data TYPE ztq2c_cred_head

    And then use CHANGING parameter inside cl_salv_table=>factory like below

        METHOD display_report.
           DATA: lo_alv TYPE REF TO cl_salv_table.
            cl_salv_table=>factory(
            IMPORTING
                r_salv_table = lo_alv
            CHANGING
                t_table      = it_data ).
            lo_alv->display( ).
        ENDMETHOD.

Give the Report a proper name with the help of Report statement.

1. Optimization Focus, Identify and eliminate redundant logic and duplicate code.Ensure the optimized code is clean, efficient.
    Identify Redundancies: Locate instances of duplicate method implementations or method calls across multiple classes.Ensure each method has only one implementation.Refactor Code:Remove redundant logic.Consolidate duplicate methods into a single implementation.
    Write a single class named 'YCL_CUSTOMREPORT' (class name shhould be in uppercase). Implement all methods and attributes within the class, strictly provide the complete ABAP code with fully implemented methods. If the original code already had implementations for methods, strictly include those as well.
    Strictly instead of using `SELECT *`, specify the explicit fields you need in the `SELECT` statement to improve performance.
    Give the Report a proper name with the help of Report statement.
    Please provide the complete code functionality, strictly do not skip or miss any logic given in the ABAP code only redundant functionality need to be eliminated.
    
    Please follow below instructions.
        - Strictly Do not assume any custom object already exist, there will be no custom object already existing , you have to strictly implement the custom object if you are utlizing any one in the code.
        - Strictly do not use SELECT statement inside a LOOP.
        - Strictly do not use SELECT SINGLE statement inside a LOOP.
        - Strictly ensure while extracting multiple fields using Open SQL, use the @DATA syntax to declare a data object (e.g @DATA(lt_kna1)) inline for holding the query result. This ensures the data object is appropriately structured to match the fields being selected and avoids the need to declare a local variable separately.
        - Ensure Proper Type Definition: Verify that the data type you are using is defined within your program or properly imported from an external source.
            - If the data type is custom, define the structure explicitly before using it in your data declaration.
        - Strictly Check the method declaration to ensure that the parameters are correctly defined based on their usage (IMPORTING, EXPORTING, CHANGING, RETURNING).
            For example , If a parameter is only used in the CHANGING clause, remove any IMPORTING or EXPORTING clause related to that parameter in the method declaration.
        - Strictly ensure that each method implementation aligns with the method declaration parameters.All parameters used in the method implementation must correspond to parameters in method declaration.
        - Strictly instead of using `SELECT *`, specify the explicit fields you need in the `SELECT` statement to improve performance.
        - Avoid use of host variables in coding of reports.
        - Use alias in JOIN statement to improve readability and maintainability.
        - Checks for null/intial should be implemented  before performing any operaton in internal table
        - While selecting data from any SAP table, try to get data only for relevant columns instead of all columns to improve performance.
        - Use keyword OPTIONAL wherever needed
        - Use SELECT SCREEN with custom constructor. Custom container should not be used without CALL SCREEN. Alternative is to use the Factory method whic can be used.
        - Strictly In Open SQL queries syntax @ must be used
            - While using @ in the select statement comma should be used after every field.
        - Use select options to define filtering criteria with concise variable names (≤ 8 characters), prioritizing select options over parameters unless explicitly required, to execute the report and retrieve filtered data efficiently.
        - Use the 'INTO CORRESPONDING FIELDS OF' clause to map and populate fields from the database table into corresponding ABAP structure wherever applicable.
        - Use '@' before ABAP variables in SELECT queries to indicate them as variables in the WHERE clause, and in INSERT, UPDATE, and DELETE statements to specify values or conditions based on ABAP variables.
        - Verify Method Existence:
            - Ensure that the method you are calling exists in the specified class.
        - Strictly ensure that each method call aligns with the method declaration parameters.
            - For example, if a method call includes a changing parameter, that parameter must also be defined as changing in the method declaration. All parameters used in the method calls must correspond to those declared in the method.
        - Strictly ensure the length of method names must not exceed 30 characters.
        - Verify that the parameters in the method declarations are correctly specified according to their intended usage (IMPORTING, EXPORTING, CHANGING, RETURNING).
        - Strictly do not use nested SQL queries.
        - Strictly utilize syntax ('TYPE') instead of 'TYPE TABLE OF' for defining the parameters Type in all the method definations i.e  it should use single instance instead of TABLE in defining type of method parameters(IMPORTING,EXPORTING,CHANGING,RETURNING).
        - Strictly use relevant standard SAP table types that mostly match the data structure you returning in the Method, ensuring methods use these standard types for returning parameters to maintain consistency and clarity, if you do not find standard table types for returning the data structure then create a new one for every method returning structure.
        - Ensure that the method you are calling exists in the specified class.
        - Strictly ensure entire code syntax is correct and code is compilable. Syntax of ABAP SQL query should be correct.
        - Strictly do not provide any placeholders for methods, provide complete actual abap code copying from original given abap code, do not give placeholders in the methods.

    
2. Maintain Functionality:Ensure that the optimized code remains clean, efficient, and maintains the same functionality as before.
   Maintain Functionality do not alter the core logic or functionality of the provided ABAP code.
  - All existing features and operations must work exactly as they do in the original code.
3. Strictly provide complete code coverage .Ensure no part of the code or logic is skipped or omitted. Do not omit any code for brevity.Do not exclude any classes, methods.
4. You have been given SAP object and its naming convention below in JSON format. Use this naming convention to name the new custom SAP objects only by adding given corresponding prefixes for the SAP objects you are using while generating the code
    {{
    "Report": "YGTPTR_*",
    "Table": "8GTT_*",
    "Data Element": "YGTPT_",
    "function module": "YGT_*",
    "function group": "YGTPT_*",
    "structure": "YGTPTS_*",
    "table type(standard)": "YGTPTT_*",
    "table type(sorted)": "YGTPTS_*",
    "table type(hashed)": "YGTPTH_*",
    "method": null,
    "Domain": "YGTPT_*",
    "Tables": "GTT",
    "Transaction Code": "YGTPT00_*",
    "Translatable Objects (SE63 text) - OTR (GENERAL TEXT)": "YGTPTGT_*",
    "Translatable Objects (SE63 text) - OTR (TEXT MODULE)": "YGTPTTM_*",
    "Smart forms": "YGTPTSF_*",
    "Smart styles": "YGTPTSS_*",
    "Text modules": "YGTPTTM_*",
    "Search Helps(Elementary)": "YGTPTE_*",
    "Search Helps(Collective)": "YGTPTC_*",
    "SAP Interactive Forms by Adobe(FORM)": "YGTPTFPF_*",
    "SAP Interactive Forms by Adobe(interface)": "YGTPTFPI_*",
    "Logical Database": "YGTPT_*",
    "Layout sets": "YGT*",
    "Implicit Enhancement": "YGTPTI_*",
    "BADI Definition name": "BD_YGTPT_*",
    "Business Add-Ins (BAdI) Class": "CL_IM_YGT_*",
    "Business Add-Ins (BAdI) Name of the implementation": "YGT_*",
    "Append Structures": "YGTPTS_*",
    "Application log objects": "YGTPT_*",
    "Dialog Modules": "YGTPT_*",
    "Enhancement Spot": "YGTPT_*",
    "Enhancement Implementation": "YGTPT_*",
    "Explicit Enhancements": "YGTPTE_*",
    "Interfaces (ABAP OO)": "IF_YGTPT_*"
    }}
    For example, if a newly generated custom table similar to BKPF is created in the code, the name of the table will be "8GTT_BKPF".'''


Optimization_Prompt_2 :'''5. Once you completed the code integrate below methods( below methods can be placeholder methods) in the code prepared by you.'''


Optimization_Prompt_3 :'''6. Strictly use relevant names for returning custom SAP table types(for example for returning sales related data from the method you can use 'Z_cust_sales' TYPE Returning data type parameter, similarly for returning billing related data from the method you can use 'Z_BILLING_DATA' TYPE Returning data type parameter) in Method Definations only . Your output code must be compiled without any errors. Strictly give Special attention to method calls the type of parameters used in method calls must exactly match with Type of parameters available in Method defination.
7. Strictly execution of Display Report Method(using standard class cl_salv_table using) must be always end in the START-OF-SELECTION block.
Strictly Use CL_SALV_TABLE standard class in ABAP for creating and displaying ALV grids in a simplified and standardized way.
Strictly use the parameter type CHANGING inside display method defination as below :
   display_report
        CHANGING
          it_data TYPE ztq2c_cred_head

    And then use CHANGING parameter inside cl_salv_table=>factory like below

        METHOD display_report.
           DATA: lo_alv TYPE REF TO cl_salv_table.
            cl_salv_table=>factory(
            IMPORTING
                r_salv_table = lo_alv
            CHANGING
                t_table      = it_data ).
            lo_alv->display( ).
        ENDMETHOD.

    
8. Strictly use below Output format, this is just example for reference for format only

    ```ABAP

    actual abap  code

    ```
'''
